const u={MIN_EASE_FACTOR:1.3,INITIAL_EASE_FACTOR:2.5,INITIAL_INTERVAL:1,SECOND_INTERVAL:6,QUALITY_THRESHOLD:3};class c{static processReview(t,e){const a=Date.now(),i={...t.srsData};return i.lastReviewed=a,i.updatedAt=a,e>=u.QUALITY_THRESHOLD?(i.repetitions+=1,i.repetitions===1?i.interval=u.INITIAL_INTERVAL:i.repetitions===2?i.interval=u.SECOND_INTERVAL:i.interval=Math.round(i.interval*i.easeFactor),i.easeFactor=this.calculateNewEaseFactor(i.easeFactor,e)):(i.repetitions=0,i.interval=u.INITIAL_INTERVAL,i.easeFactor=Math.max(u.MIN_EASE_FACTOR,i.easeFactor-.2)),i.nextReviewDate=this.calculateNextReviewDate(a,i.interval),{...t,srsData:i}}static calculateNewEaseFactor(t,e){const a=e+1,i=t+(.1-(5-a)*(.08+(5-a)*.02));return Math.max(u.MIN_EASE_FACTOR,i)}static calculateNextReviewDate(t,e){return t+e*864e5}static createInitialSRSData(){const t=Date.now();return{nextReviewDate:t,interval:0,repetitions:0,easeFactor:u.INITIAL_EASE_FACTOR,lastReviewed:0,createdAt:t,updatedAt:t}}static getDueItems(t,e=Date.now()){return t.filter(a=>a.srsData.nextReviewDate<=e)}static getNewItems(t){return t.filter(e=>e.srsData.repetitions===0&&e.srsData.lastReviewed===0)}static getLearnedItems(t,e=3){return t.filter(a=>a.srsData.repetitions>=e)}static calculateStats(t,e=[]){const a=Date.now(),i=new Date().toDateString(),n=this.getDueItems(t,a),o=this.getNewItems(t),g=this.getLearnedItems(t),h=e.filter(l=>l.endTime&&new Date(l.endTime).toDateString()===i),w=e.filter(l=>l.quality!==void 0).slice(-50),R=w.length>0?w.filter(l=>l.quality>=u.QUALITY_THRESHOLD).length/w.length:0,S=new Set(e.filter(l=>l.endTime).map(l=>new Date(l.endTime).toDateString()));return{totalItems:t.length,dueToday:n.length,newToday:o.length,reviewedToday:h.length,learnedItems:g.length,accuracyRate:R,streak:S.size,totalReviews:e.length}}static resetProgress(t){return{...t,srsData:{...t.srsData,nextReviewDate:Date.now(),interval:0,repetitions:0,easeFactor:u.INITIAL_EASE_FACTOR,lastReviewed:0,updatedAt:Date.now()}}}}const s={VOCABULARY:"vocabulary",USER_CONFIG:"userConfig",REVIEW_HISTORY:"reviewHistory",LEARNING_STATS:"learningStats",LAST_BACKUP:"lastBackup",INSTALLATION_DATE:"installationDate",VERSION:"version"},y={ttsVoice:"default",speechRate:1,speechPitch:1,notificationsEnabled:!0,quietHoursStart:22,quietHoursEnd:8,targetLanguage:"hi-IN",newWordRepetitions:3},f=[{id:"default-1",targetLanguageWord:"नमस्ते",englishTranslation:"hello/goodbye",pronunciationAudioUrl:"",tags:["greeting","common"],srsData:c.createInitialSRSData()},{id:"default-2",targetLanguageWord:"धन्यवाद",englishTranslation:"thank you",pronunciationAudioUrl:"",tags:["gratitude","common"],srsData:c.createInitialSRSData()},{id:"default-3",targetLanguageWord:"माफ़ करें",englishTranslation:"excuse me/sorry",pronunciationAudioUrl:"",tags:["apology","common"],srsData:c.createInitialSRSData()},{id:"default-4",targetLanguageWord:"कृपया",englishTranslation:"please",pronunciationAudioUrl:"",tags:["politeness","common"],srsData:c.createInitialSRSData()},{id:"default-5",targetLanguageWord:"हाँ",englishTranslation:"yes",pronunciationAudioUrl:"",tags:["response","basic"],srsData:c.createInitialSRSData()}];class d{static async initialize(){try{await this.getInstallationDate()||await this.performFirstTimeSetup();const e=await this.getVocabulary();(!e||e.length===0)&&await this.setVocabulary(f),await this.getUserConfig()||await this.setUserConfig(y),await this.getReviewHistory()||await this.setReviewHistory([]),console.log("Storage initialized successfully")}catch(t){throw console.error("Failed to initialize storage:",t),t}}static async performFirstTimeSetup(){const t=Date.now();await Promise.all([this.setInstallationDate(t),this.setVersion(chrome.runtime.getManifest().version),this.setVocabulary(f),this.setUserConfig(y),this.setReviewHistory([]),this.updateLearningStats()]),console.log("First-time setup completed")}static async getVocabulary(){return(await chrome.storage.local.get(s.VOCABULARY))[s.VOCABULARY]||[]}static async setVocabulary(t){await chrome.storage.local.set({[s.VOCABULARY]:t}),await this.updateLearningStats()}static async addVocabularyItem(t){const e=await this.getVocabulary(),a={...t,id:this.generateId(),srsData:c.createInitialSRSData()};return e.push(a),await this.setVocabulary(e),a}static async updateVocabularyItem(t){const e=await this.getVocabulary(),a=e.findIndex(i=>i.id===t.id);if(a===-1)throw new Error(`Vocabulary item with id ${t.id} not found`);e[a]={...t,srsData:{...t.srsData,updatedAt:Date.now()}},await this.setVocabulary(e)}static async deleteVocabularyItem(t){const e=await this.getVocabulary(),a=e.filter(i=>i.id!==t);if(a.length===e.length)throw new Error(`Vocabulary item with id ${t} not found`);await this.setVocabulary(a)}static async getDueVocabulary(t=Date.now()){const e=await this.getVocabulary();return c.getDueItems(e,t)}static async getNewVocabulary(){const t=await this.getVocabulary();return c.getNewItems(t)}static async getLearnedVocabulary(t=3){const e=await this.getVocabulary();return c.getLearnedItems(e,t)}static async getUserConfig(){return(await chrome.storage.sync.get(s.USER_CONFIG))[s.USER_CONFIG]||y}static async setUserConfig(t){await chrome.storage.sync.set({[s.USER_CONFIG]:t})}static async updateUserConfig(t){const a={...await this.getUserConfig(),...t};await this.setUserConfig(a)}static async getReviewHistory(){return(await chrome.storage.local.get(s.REVIEW_HISTORY))[s.REVIEW_HISTORY]||[]}static async setReviewHistory(t){await chrome.storage.local.set({[s.REVIEW_HISTORY]:t})}static async addReviewSession(t){const e=await this.getReviewHistory();e.push(t),e.length>1e3&&e.splice(0,e.length-1e3),await this.setReviewHistory(e),await this.updateLearningStats()}static async processVocabularyReview(t,e,a,i){const o=(await this.getVocabulary()).find(w=>w.id===t);if(!o)throw new Error(`Vocabulary item with id ${t} not found`);const g=c.processReview(o,e);await this.updateVocabularyItem(g);const h={itemId:t,startTime:i,endTime:Date.now(),quality:e,responseTime:a};return await this.addReviewSession(h),g}static async updateLearningStats(){const t=await this.getVocabulary(),e=await this.getReviewHistory(),a=c.calculateStats(t,e);return await chrome.storage.local.set({[s.LEARNING_STATS]:{...a,lastUpdated:Date.now()}}),a}static async getLearningStats(){return(await chrome.storage.local.get(s.LEARNING_STATS))[s.LEARNING_STATS]||await this.updateLearningStats()}static async exportData(){const[t,e,a,i]=await Promise.all([this.getVocabulary(),this.getUserConfig(),this.getReviewHistory(),this.getLearningStats()]),n={version:chrome.runtime.getManifest().version,exportDate:new Date().toISOString(),vocabulary:t,userConfig:e,reviewHistory:a,learningStats:i};return JSON.stringify(n,null,2)}static async importVocabulary(t){if(!Array.isArray(t))throw new Error("Invalid vocabulary data: must be an array");for(const o of t)if(!this.isValidVocabularyItem(o))throw new Error(`Invalid vocabulary item: ${JSON.stringify(o)}`);const e=await this.getVocabulary(),a=new Set(e.map(o=>o.id)),i=t.map(o=>{const g=!o.id||a.has(o.id);return{...o,id:g?this.generateId():o.id,srsData:o.srsData||c.createInitialSRSData()}}),n=[...e,...i];await this.setVocabulary(n)}static async importFullData(t){let e;try{e=JSON.parse(t)}catch{throw new Error("Invalid JSON data")}if(!e.vocabulary||!Array.isArray(e.vocabulary))throw new Error("Invalid data: vocabulary array is required");e.vocabulary.length>0&&await this.importVocabulary(e.vocabulary),e.userConfig&&await this.setUserConfig({...y,...e.userConfig}),e.reviewHistory&&Array.isArray(e.reviewHistory)&&await this.setReviewHistory(e.reviewHistory),await this.updateLearningStats()}static async clearAllData(){await chrome.storage.local.clear(),await chrome.storage.sync.clear(),await this.initialize()}static async getStorageUsage(){const[t,e]=await Promise.all([chrome.storage.local.getBytesInUse(),chrome.storage.sync.getBytesInUse()]);return{local:t,sync:e}}static async createBackup(){const t=await this.exportData();await chrome.storage.local.set({[s.LAST_BACKUP]:{data:t,timestamp:Date.now()}})}static async getLastBackup(){return(await chrome.storage.local.get(s.LAST_BACKUP))[s.LAST_BACKUP]||null}static async getInstallationDate(){return(await chrome.storage.local.get(s.INSTALLATION_DATE))[s.INSTALLATION_DATE]||null}static async setInstallationDate(t){await chrome.storage.local.set({[s.INSTALLATION_DATE]:t})}static async setVersion(t){await chrome.storage.local.set({[s.VERSION]:t})}static generateId(){return`vocab_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}static isValidVocabularyItem(t){return typeof t=="object"&&t!==null&&typeof t.targetLanguageWord=="string"&&typeof t.englishTranslation=="string"&&(typeof t.id=="string"||!t.id)&&(!t.tags||Array.isArray(t.tags))&&(!t.srsData||this.isValidSRSData(t.srsData))}static isValidSRSData(t){return typeof t=="object"&&t!==null&&typeof t.nextReviewDate=="number"&&typeof t.interval=="number"&&typeof t.repetitions=="number"&&typeof t.easeFactor=="number"&&typeof t.lastReviewed=="number"&&typeof t.createdAt=="number"&&typeof t.updatedAt=="number"}}const p=class p{static initialize(){chrome.storage.onChanged.addListener((t,e)=>{this.listeners.forEach((a,i)=>{a({changes:t,areaName:e})})})}static addListener(t,e){this.listeners.set(t,e)}static removeListener(t){this.listeners.delete(t)}};p.listeners=new Map;let m=p;chrome.runtime.onInstalled.addListener(async r=>{console.log("Hindi Language Learner extension installed/updated:",r.reason);try{await d.initialize(),console.log("Storage initialized successfully"),m.initialize(),await A(),r.reason==="install"&&(await d.createBackup(),console.log("Initial backup created")),console.log("Extension initialization complete")}catch(t){console.error("Error during extension initialization:",t)}});async function A(){try{await chrome.alarms.clear("dailyReviewCheck");const r=new Date,t=new Date;t.setHours(9,0,0,0),t<=r&&t.setDate(t.getDate()+1),await chrome.alarms.create("dailyReviewCheck",{when:t.getTime(),periodInMinutes:24*60}),console.log("Daily review alarm scheduled for:",t.toLocaleString())}catch(r){console.error("Error setting up daily alarm:",r)}}chrome.alarms.onAlarm.addListener(async r=>{r.name==="dailyReviewCheck"&&(console.log("Daily review check triggered"),await I())});async function I(){try{const r=await d.getUserConfig();if(!r.notificationsEnabled){console.log("Notifications are disabled");return}const e=new Date().getHours();if(v(e,r.quietHoursStart,r.quietHoursEnd)){console.log("Currently in quiet hours, skipping notification");return}const a=await d.getDueVocabulary(),i=await d.getNewVocabulary(),n=Math.min(i.length,5),o=a.length+n;o>0?await D(o,a.length,n):console.log("No reviews due today")}catch(r){console.error("Error checking due reviews:",r)}}async function D(r,t,e){let a;e>0&&t>0?a=`${t} reviews + ${e} new words ready! Keep up your learning streak! 🎆`:e>0?a=`${e} new word${e>1?"s":""} ready to learn! 🌱`:a=`${t} word${t>1?"s":""} ready for review! 💪`;const i={type:"basic",iconUrl:"assets/icon-128.png",title:"Hindi Learning Time! 📚",message:a,buttons:[{title:"Start Review"},{title:"Later"}]};try{const n=await chrome.notifications.create("reviewReminder",i);console.log(`Review notification sent: ${t} due, ${e} new items`)}catch(n){console.error("Error sending notification:",n)}}chrome.notifications.onClicked.addListener(async r=>{if(r==="reviewReminder")try{await chrome.notifications.clear(r);try{await chrome.action.openPopup()}catch{chrome.windows.create({url:chrome.runtime.getURL("popup/popup.html"),type:"popup",width:400,height:600,focused:!0})}}catch(t){console.error("Error handling notification click:",t)}});chrome.notifications.onButtonClicked.addListener(async(r,t)=>{if(r==="reviewReminder")try{if(t===0)try{await chrome.action.openPopup()}catch{chrome.windows.create({url:chrome.runtime.getURL("popup/popup.html"),type:"popup",width:400,height:600,focused:!0})}else t===1&&(chrome.alarms.create("laterReminder",{when:Date.now()+2*60*60*1e3}),console.log("Later reminder set for 2 hours"));await chrome.notifications.clear(r)}catch(e){console.log("Error handling notification button click:",e)}});function v(r,t,e){return t<=e?r>=t&&r<e:r>=t||r<e}chrome.alarms.onAlarm.addListener(async r=>{r.name==="laterReminder"&&(console.log("Later reminder triggered"),await I())});
